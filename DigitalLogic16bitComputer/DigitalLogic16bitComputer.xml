<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DigitalLogic16bitComputer</name>
    </assembly>
    <members>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.FullAdder">
            <summary>
            A full adder is a digital circuit that performs the arithmetic operation of addition, specifically, 
            the addition of two binary digits and a carry. 
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.FullAdder.InputA">
            <summary>
            First input bit to be added
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.FullAdder.InputB">
            <summary>
            Second input bit to be added
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.FullAdder.InputCarry">
            <summary>
            Carry input from a previous addition
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.FullAdder.Output">
            <summary>
            Output of the addition of the three input bits
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.FullAdder.OutputCarry">
            <summary>
            Carry output for the next addition
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.FullAdder.#ctor(DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Constructs a FullAdder object with input bits and carry. 
            </summary>
            <param name="inputA">First input bit to be added</param>
            <param name="inputB">Second input bit to be added</param>
            <param name="inputCarry">Carry input from a previous addition</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseAnd">
            <summary>
            Represents a N-bit bitwise AND circuit for positive integers.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseAnd.OutputNum">
            <summary>
            The result of the bitwise AND operation.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseAnd.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Performs a bitwise AND operation on two N-bit arrays of positive integers.
            </summary>
            <param name="numA">The first N-bit array of positive integers</param>
            <param name="numB">The second N-bit array of positive integers</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseNand">
            <summary>
            Represents a N-bit bitwise NAND circuit for two N-bit arrays of integers.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseNand.OutputNum">
            <summary>
            The output of the bitwise NAND operation.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseNand.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseNand"/> class.
            Performs a bitwise NAND operation on two N-bit arrays.
            </summary>
            <param name="numA">The first N-bit array to perform the operation on.</param>
            <param name="numB">The second N-bit array to perform the operation on.</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseNor">
            <summary>
            Represents a N-bit bitwise NOR circuit for two N-bit arrays of integers.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseNor.OutputNum">
            <summary>
            The output of the bitwise NOR operation.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseNor.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseNor"/> class.
            Performs a bitwise NOR operation on two N-bit arrays.
            </summary>
            <param name="numA">The first N-bit array to perform the operation on.</param>
            <param name="numB">The second N-bit array to perform the operation on.</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseNot">
            <summary>
            Represents a N-bit bitwise NOT circuit for positive integers.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseNot.OutputNum">
            <summary>
            The output of the bitwise NOT operation.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseNot.#ctor(DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseNot"/> class.
            </summary>
            <param name="num">The N-bit input number.</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseOr">
            <summary>
            Represents a N-bit bitwise OR circuit for positive integers.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseOr.OutputNum">
            <summary>
            The output of the bitwise OR operation.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseOr.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Creates a new N-bit bitwise OR circuit for two positive integers.
            </summary>
            <param name="numA">The first number.</param>
            <param name="numB">The second number.</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseXor">
            <summary>
            Represents a bitwise binary XOR operation on two N-bit numbers.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseXor.OutputNum">
            <summary>
            The output of the bitwise XOR operation.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseXor.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalLogic16bitComputer.components.arithmetic.logic.NBitBitwiseXor"/> class.
            </summary>
            <param name="numA">The first N-bit number.</param>
            <param name="numB">The second N-bit number.</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.NBitAdder">
            <summary>
            A class that represents a N-Bit Adder, which takes in two N-bit numbers and an input carry
            and outputs the sum of the two numbers, the carry out, and the overflow bit.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitAdder.OutputNum">
            <summary>
            The resulting sum of the two input numbers, in the form of an <see cref="T:DigitalLogic16bitComputer.components.NBitArray"/>
            </summary>
            
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitAdder.OutputCarry">
            <summary>
            The carry out bit of the addition, indicating whether a carry occurred from the most significant bit
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitAdder.OutputOverflow">
            <summary>
            The overflow bit of the addition, indicating whether an overflow occurred from the addition
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.NBitAdder.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Constructs an NBitAdder, which takes in two N-bit numbers and an input carry
            and outputs the sum of the two numbers, the carry out, and the overflow bit.
            </summary>
            <param name="numA">The first N-bit number to be added</param>
            <param name="numB">The second N-bit number to be added</param>
            <param name="inputCarry">The input carry bit, indicating whether a carry is being propagated from a previous addition</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.NBitAdderSubtractor">
            <summary>
            Represents a N-bit adder-subtractor circuit.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitAdderSubtractor.Subtract">
            <summary>
            Indicates whether the circuit is in subtraction mode.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitAdderSubtractor.OutputNum">
            <summary>
            The N-bit output of the circuit.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.NBitAdderSubtractor.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.Bit)">
            <param name="numA">The first N-bit number to be added or subtracted.</param>
            <param name="numB">The second N-bit number to be added or subtracted.</param>
            <param name="subtract">A bit that determines whether the operation is addition or subtraction.</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.NBitArithmetic">
            <summary>
            The N-bit Arithmetic class performs various arithmetic and logic operations on two N-bit numbers.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitArithmetic.OutputNum">
            <summary>
            The N-bit output of the circuit.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.NBitArithmetic.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            The constructor of the NBitArithmetic class.
            1: ADD
            2: SUB
            3: DIV
            4: MOD
            5: MUL
            6: NOT
            7: AND
            8: ORR
            9: XOR
            10: ORN
            11: BIC
            12: RSB (NEG)
            13: LSL
            14: LSR
            15: ASR
            16: ROR
            </summary>
            <param name="inputA">The first operand of the operation as an NBitArray.</param>
            <param name="inputB">The second operand of the operation as an NBitArray.</param>
            <param name="opSelect1">The first control bit that determines the operation to be performed.</param>
            <param name="opSelect2">The second control bit that determines the operation to be performed.</param>
            <param name="opSelect3">The third control bit that determines the operation to be performed.</param>
            <param name="opSelect4">The fourth control bit that determines the operation to be performed.</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.NBitDivider">
            <summary>
            Division module for two N-bit integers.
            </summary>
            <param name="numA">Number A</param>
            <param name="numB">Number B</param>
            <exception cref="T:System.ArgumentException">Both numbers must have at least 3 bits each and be of the same length</exception>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitDivider.OutputNum">
            <summary>
            The result of the devision.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitDivider.OutputRemainder">
            <summary>
            The remainder of the division.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.NBitDivider.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Division module for two N-bit integers. 
            </summary>
            <param name="numA">Number A</param>
            <param name="numB">Number B</param>
            <exception cref="T:System.ArgumentException">Both numbers must have at least 3 bits each and be of the same length</exception>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.NBitMultiplier">
            <summary>
            Multiplication module for two N-bit integers.
            </summary>
            <param name="numA">Number A</param>
            <param name="numB">Number B</param>
            <exception cref="T:System.ArgumentException">Both numbers must have at least 3 bits each and be of the same length</exception>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitMultiplier.OutputNum">
            <summary>
            The N first bits of the resulting product of the multiplication in 2's complement representation.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitMultiplier.FullOutputNum">
            <summary>
            The resulting product of the multiplication in full 2's complement representation.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitMultiplier.OutputOverflow">
            <summary>
            The overflow bit indicating if the result of the multiplication exceeds the range of an N-bit number.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.NBitMultiplier.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Multiplication module for two N-bit integers. 
            </summary>
            <param name="numA">Number A</param>
            <param name="numB">Number B</param>
            <exception cref="T:System.ArgumentException">Both numbers must have at least 3 bits each and be of the same length</exception>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitPositiveDivider.OutputNum">
            <summary>
            The result of the devision.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitPositiveDivider.OutputRemainder">
            <summary>
            The remainder of the division.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.NBitPositiveDivider.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Division module for two N-bit POSITIVE integers. This module does not work if negative numbers are passed
            </summary>
            <param name="numA">Number A</param>
            <param name="numB">Number B</param>
            <exception cref="T:System.ArgumentException">Both numbers must have at least 3 bits each and be of the same length</exception>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.NBitPositiveMultiplier">
            <summary>
            Represents a N-bit multiplier circuit for positive integers.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitPositiveMultiplier.OutputNum">
            <summary>
            The N first bits of the resulting product of the multiplication in 2's complement representation.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitPositiveMultiplier.FullOutputNum">
            <summary>
            The resulting product of the multiplication in full 2's complement representation.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitPositiveMultiplier.OutputOverflow">
            <summary>
            Represents the overflow bit of the multiplication operation. 
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.NBitPositiveMultiplier.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Multiplication module for two N-bit POSITIVE integers. This module does not work if negative numbers are passed
            </summary>
            <param name="numA">Number A</param>
            <param name="numB">Number B</param>
            <exception cref="T:System.ArgumentException">Both numbers must have at least 3 bits each and be of the same length</exception>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.NBitPositiveMultiplier.AndAll(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Perform bitwise AND operation on all bits of <paramref name="num"/> using <paramref name="bit"/>
            </summary>
            <param name="num">The NBitArray to perform the operation on</param>
            <param name="bit">The Bit to compare with</param>
            <returns>The NBitArray with the result of the operation</returns>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.NBitPositiveMultiplier.RemoveLastBit(DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Remove the last bit of <paramref name="num"/>
            </summary>
            <param name="num">The NBitArray to remove the last bit from</param>
            <returns>The NBitArray with the last bit removed</returns>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.NBitPositiveMultiplier.ConcatFirst(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Create a new NBitArray by concatenating <paramref name="bit"/> at the beginning of <paramref name="num"/>
            </summary>
            <param name="num">The NBitArray to append to</param>
            <param name="bit">The Bit to append</param>
            <returns>The new NBitArray</returns>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.NBitTwosComplement">
            <summary>
            Class for creating the two's complement representation of a number.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.NBitTwosComplement.OutputNum">
            <summary>
            The two's complement of the input number
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.NBitTwosComplement.#ctor(DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="number">The input number to convert to two's complement</param>
            <exception cref="T:System.ArgumentException">Thrown when the number of bits in the input number is less than 2</exception>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.shift.NBitLeftShift">
            <summary>
            Represents a N-bit left shift circuit for positive integers.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.shift.NBitLeftShift.OutputNum">
            <summary>
            The output of the left shift operation
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.shift.NBitLeftShift.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Constructs a new N-bit left shift circuit for positive integers.
            </summary>
            <param name="num">The input number to be shifted</param>
            <param name="shiftN">The number of bits to shift</param>
            <exception cref="T:System.ArgumentException">The input num must have a number of bits that is a power of 2</exception>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.shift.NBitRightShift">
            <summary>
            Represents a N-bit right shift circuit for positive integers.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.shift.NBitRightShift.OutputNum">
            <summary>
            The output number after the right shift operation.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.shift.NBitRightShift.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray,System.Func{DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.NBitArray})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalLogic16bitComputer.components.arithmetic.shift.NBitRightShift"/> class.
            </summary>
            <param name="num">The number to shift</param>
            <param name="shiftN">The number of bits to shift by</param>
            <param name="shiftedOutBitsToShiftedInBitsDelegate">A delegate that converts the shifted out bits to the shifted in bits</param>
            <exception cref="T:System.ArgumentException">The input num must have a number of bits that is a power of 2</exception>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.arithmetic.shift.NBitShift">
            <summary>
            Represents a N-bit shift circuit that can perform left shift, right shift, rotate right, and arithmetic shift right operations.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.arithmetic.shift.NBitShift.OutputNum">
            <summary>
            The output of the shift operation
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.arithmetic.shift.NBitShift.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalLogic16bitComputer.components.arithmetic.shift.NBitShift"/> class.
            opSelect1, opSelect2 => OP
            false, false => LSL
            false, true => LSR
            true, false => ROR
            true, true => ASR
            </summary>
            <param name="num">The number to be shifted</param>
            <param name="shiftN">The number of bits to shift the input by</param>
            <param name="opSelect1">The first select bit for the operation</param>
            <param name="opSelect2">The second select bit for the operation</param>
            <exception cref="T:System.ArgumentException">The input num must have a number of bits that is a power of 2</exception>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.Bit">
            <summary>
            Represents a single bit in a digital logic circuit.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.Bit.Value">
            <summary>
            Gets or sets the value of the bit (either true or false)
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.Bit.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Bit class with an optional initial value
            </summary>
            <param name="value">The initial value of the bit (default is false)</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.Bit.RegisterUpdate(DigitalLogic16bitComputer.components.IUpdatable)">
            <summary>
            Registers a component to be updated when the value of this bit changes
            </summary>
            <param name="component">The component to be updated</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.Bit.UnregisterUpdate(DigitalLogic16bitComputer.components.IUpdatable)">
            <summary>
            Unregisters a component from being updated when the value of this bit changes
            </summary>
            <param name="component">The component to be removed</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.Bit.ConnectFrom(DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Connects this bit to another bit
            </summary>
            <param name="bit">The bit to be connected to</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.Bit.DisconnectFrom(DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Disconnects this bit from another bit
            </summary>
            <param name="bit">The bit to be disconnected from</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.Bit.Update">
            <summary>
            Updates the value of this bit based on its connections
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.Bit.Dispose">
            <summary>
            Disposes of this bit and its connections
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.Bit.ToString">
            <summary>
            Converts the value of this bit to a string representation
            </summary>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.control.Buffer">
            <summary>
            Represents a buffer circuit that connects the input to the output when the enable signal is high.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.control.Buffer.Output">
            <summary>
            The output of the buffer circuit.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.control.Buffer.Input">
            <summary>
            The input to the buffer circuit.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.control.Buffer.Enable">
            <summary>
            The enable signal for the buffer circuit.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.control.Buffer.#ctor(DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalLogic16bitComputer.components.control.Buffer"/> class.
            </summary>
            <param name="input">The input to the buffer circuit.</param>
            <param name="output">The output of the buffer circuit.</param>
            <param name="enable">The enable signal for the buffer circuit.</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.control.Buffer.Update">
            <summary>
            Updates the buffer circuit based on the current state of the enable signal.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.control.Buffer.Dispose">
            <summary>
            Disposes of the buffer circuit by unregistering the update method from the enable signal.
            </summary>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.control.Demultiplexer">
            <summary>
            The Demultiplexer class is a digital logic gate that selects one of multiple outputs from a single input.
            </summary>
        </member>
        <member name="F:DigitalLogic16bitComputer.components.control.Demultiplexer.Outputs">
            <summary>
            The Outputs attribute holds the selected output.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.control.Demultiplexer.#ctor(DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            The constructor for the Demultiplexer class takes in two inputs: a single input bit and an enable bit.
            The output will have two bits. If the input bit is false, the first bit will be true, if the input is true, the seccond bit will be true.
            </summary>
            <param name="input">The single input bit</param>
            <param name="enable">The enable bit</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DigitalLogic16bitComputer.components.control.Demultiplexer.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.Bit)" -->
        <member name="T:DigitalLogic16bitComputer.components.control.Multiplexer">
            <summary>
            A Multiplexer (MUX) is a combinational logic circuit that selects one of several inputs and forwards it to the output.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.control.Multiplexer.Output">
            <summary>
            The output of the multiplexer.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.control.Multiplexer.#ctor(DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Creates a new 2:1 multiplexer with the specified inputs and select bit.
            </summary>
            <param name="inputA">The first input bit</param>
            <param name="inputB">The second input bit</param>
            <param name="select">The select bit</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.control.Multiplexer.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Creates a new N:1 multiplexer with the specified inputs and select bits.
            </summary>
            <param name="inputs">The input bits</param>
            <param name="selectBits">The select bits</param>
            <exception cref="T:System.ArgumentException">If the number of inputs is not a power of 2 or if the number of select bits is not equal to log2(inputs.Length)</exception>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.control.NBitBuffer">
            <summary>
            Represents a N-bit buffer circuit that connects or disconnects a N-bit input to a N-bit output based on the value of the enable bit.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.control.NBitBuffer.NBitOutput">
            <summary>
            The N-bit output of the buffer circuit.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.control.NBitBuffer.NBitInput">
            <summary>
            The N-bit input of the buffer circuit.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.control.NBitBuffer.Enable">
            <summary>
            The enable bit that controls whether the input is connected to the output or not.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.control.NBitBuffer.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Creates a N-bit buffer circuit that connects or disconnects a N-bit input to a N-bit output based on the value of the enable bit.
            </summary>
            <param name="nBitInput">The N-bit input of the buffer circuit.</param>
            <param name="nBitOutput">The N-bit output of the buffer circuit.</param>
            <param name="enable">The enable bit that controls whether the input is connected to the output or not.</param>
            <exception cref="T:System.ArgumentException">Input and Output must have the same length</exception>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.control.NBitMultiplexer">
            <summary>
            Represents a multiplexer that selects one of multiple N-bit inputs based on a selection bit or N-bit select signal.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.control.NBitMultiplexer.NBitOutput">
            <summary>
            The output of the multiplexer, an N-bit array.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.control.NBitMultiplexer.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalLogic16bitComputer.components.control.NBitMultiplexer"/> class that selects between two N-bit inputs based on a selection bit.
            </summary>
            <param name="nBitInputA">The first N-bit input to be selected.</param>
            <param name="nBitInputB">The second N-bit input to be selected.</param>
            <param name="select">The selection bit, where a value of 1 selects <paramref name="nBitInputA"/> and a value of 0 selects <paramref name="nBitInputB"/>.</param>
            <exception cref="T:System.ArgumentException">Inputs must have the same length</exception>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.control.NBitMultiplexer.#ctor(DigitalLogic16bitComputer.components.NBitArray[],DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalLogic16bitComputer.components.control.NBitMultiplexer"/> class that selects between multiple N-bit inputs based on an N-bit select signal.
            </summary>
            <param name="inputArrays">The array of N-bit inputs to be selected from.</param>
            <param name="selectBits">The N-bit selection</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.gates.AndGate">
            <summary>
            Represents an AND gate in a digital logic circuit.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.gates.AndGate.InputA">
            <summary>
            The first input bit for the AND gate
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.gates.AndGate.InputB">
            <summary>
            The second input bit for the AND gate
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.gates.AndGate.Output">
            <summary>
            The output bit for the AND gate
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.AndGate.#ctor(DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Initializes a new instance of the AndGate class with two input bits
            </summary>
            <param name="inputA">The first input bit</param>
            <param name="inputB">The second input bit</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.AndGate.#ctor(DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Initializes a new instance of the AndGate class with an array of input bits
            </summary>
            <param name="inputs">An array of input bits</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.AndGate.InitializeInputs(DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Initializes the inputs and output of the AND gate
            </summary>
            <param name="inputA">The first input</param>
            <param name="inputB">The second input</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.AndGate.Update">
            <summary>
            Updates the output of the AND gate based on the inputs
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.AndGate.Dispose">
            <summary>
            Unregisters the update for the inputs
            </summary>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.gates.NandGate">
            <summary>
            A logical NAND gate implementation
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.gates.NandGate.Output">
            <summary>
            The output of the NAND gate
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.NandGate.#ctor(DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Initializes a new instance of the NandGate class with two input bits
            </summary>
            <param name="inputA">The first input bit</param>
            <param name="inputB">The second input bit</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.NandGate.#ctor(DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Initializes a new instance of the NandGate class with an NBitArray of inputs
            </summary>
            <param name="inputs">The NBitArray of inputs</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.gates.NorGate">
            <summary>
            A logical NOR gate implementation
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.gates.NorGate.Output">
            <summary>
            The output of the Nor gate
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.NorGate.#ctor(DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Initializes a new instance of the NorGate class with two input bits
            </summary>
            <param name="inputA">The first input bit</param>
            <param name="inputB">The second input bit</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.NorGate.#ctor(DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Initializes a new instance of the NorGate class with an NBitArray of inputs
            </summary>
            <param name="inputs">The NBitArray of inputs</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.gates.NotGate">
            <summary>
            Represents a NOT gate in a digital logic circuit.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.gates.NotGate.Input">
            <summary>
            The input bit for the NOT gate
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.gates.NotGate.Output">
            <summary>
            The output bit for the NOT gate
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.NotGate.#ctor(DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Initializes a new instance of the NotGate class
            </summary>
            <param name="input">The input bit for the NOT gate</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.NotGate.Update">
            <summary>
            Updates the output bit based on the input bit
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.NotGate.Dispose">
            <summary>
            Unregisters the component from the input bit
            </summary>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.gates.OrGate">
            <summary>
            Represents an OR gate in a digital logic circuit.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.gates.OrGate.InputA">
            <summary>
            The first input bit for the OR gate
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.gates.OrGate.InputB">
            <summary>
            The second input bit for the OR gate
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.gates.OrGate.Output">
            <summary>
            The output bit for the OR gate
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.OrGate.#ctor(DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Initializes a new instance of the OrGate class with two input bits
            </summary>
            <param name="inputA">The first input bit for the OR gate</param>
            <param name="inputB">The second input bit for the OR gate</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.OrGate.#ctor(DigitalLogic16bitComputer.components.NBitArray)">
            <summary>
            Initializes a new instance of the OrGate class with N input bits
            </summary>
            <param name="inputs">The input bits for the OR gate</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.OrGate.InitializeInputs(DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Initializes the inputs and output of the OR gate
            </summary>
            <param name="inputA">The first input</param>
            <param name="inputB">The second input</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.OrGate.Update">
            <summary>
            Updates the output of the AND gate based on the inputs
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.OrGate.Dispose">
            <summary>
            Unregisters the update for the inputs
            </summary>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.gates.XorGate">
            <summary>
            A XOR gate implementation
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.gates.XorGate.Output">
            <summary>
            Output bit of the XOR gate
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.gates.XorGate.#ctor(DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalLogic16bitComputer.components.gates.XorGate"/> class.
            </summary>
            <param name="inputA">First input for the XOR gate</param>
            <param name="inputB">Second input for the XOR gate</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.IUpdatable">
            <summary>
            Interface for updatable components
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.IUpdatable.Update">
            <summary>
            Update the component's state
            </summary>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.NBitArray">
            <summary>
            Wrapper for an array of bits with a few utility functions
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.NBitArray.Length">
            <summary>
            The number of bits in the array
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.NBitArray.#ctor(DigitalLogic16bitComputer.components.Bit[])">
            <summary>
            Initializes a new instance of the NBitArray class with a given array of bits
            </summary>
            <param name="bitArray">The array of bits to be wrapped</param>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.NBitArray.Item(System.Int32)">
            <summary>
            Indexer for accessing individual bits in the array
            </summary>
            <param name="i">The index of the desired bit</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.NBitArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the bits in the array
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.NBitArray.GetEnumerator">
            <summary>
            Gets an enumerator for the bits in the array
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.NBitArray.ToString">
            <summary>
            Converts the bit array to a string representation
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.NBitArray.ToInt">
            <summary>
            Converts the bit array to an integer
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.NBitArray.ToBinaryString">
            <summary>
            Converts the bit array to a binary string
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.NBitArray.SubArray(System.Int32,System.Int32)">
            <summary>
            Creates a sub array of this NBitArray
            </summary>
            <param name="startIndex">The first bit index to be included</param>
            <param name="endIndex">The last bit index to be included</param>
            <returns>A sub array of this NBitArray</returns>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.NBitArray.IntToNBitArray(System.Int32,System.Int32)">
            <summary>
            Converts an integer to a NBitArray
            </summary>
            <param name="value">The integer to be converted</param>
            <param name="nBits">The number of bits in the resulting NBitArray</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.NBitArray.BinaryStringToNBitArray(System.String)">
            <summary>
            Converts a binary string to a NBitArray
            </summary>
            <param name="binaryString">The binary string to be converted</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.registers.DFlipFlop">
            <summary>
            A D Flip-Flop is a type of bistable latch that has two stable states, one of which is the set state and the other is the reset state.
            The output of the flip-flop is the stored state which can be set or reset by the input D and the input Clock.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.registers.DFlipFlop.Output">
            <summary>
            The output of the D Flip-Flop. This is the stored state.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.registers.DFlipFlop.#ctor(DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Constructs a D Flip-Flop with input D and input Clock
            </summary>
            <param name="inputD">The input to set or reset the stored state</param>
            <param name="inputClk">The input to control when to set or reset the stored state</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.registers.NBitRegister">
            <summary>
            A class that represents a register that stores an N-bit number.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.registers.NBitRegister.Input">
            <summary>
            The input N-bit number for the register.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.registers.NBitRegister.Output">
            <summary>
            The output N-bit number for the register.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.registers.NBitRegister.#ctor(DigitalLogic16bitComputer.components.NBitArray,DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalLogic16bitComputer.components.registers.NBitRegister"/> class.
            </summary>
            <param name="input">The input N-bit number for the register.</param>
            <param name="clk">The clock input for the register.</param>
            <param name="enable">The enable input for the register.</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.registers.Register">
            <summary>
            A class that represents a register that stores a single bit.
            </summary>
        </member>
        <member name="F:DigitalLogic16bitComputer.components.registers.Register.inputFlipFlop">
            <summary>
            A D-flip-flop that serves as the input for the register.
            </summary>
        </member>
        <member name="F:DigitalLogic16bitComputer.components.registers.Register.outputFlipFlop">
            <summary>
            A D-flip-flop that serves as the output for the register.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.registers.Register.Input">
            <summary>
            The input bit for the register.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.registers.Register.Output">
            <summary>
            The output bit for the register.
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.registers.Register.#ctor(DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalLogic16bitComputer.components.registers.Register"/> class.
            </summary>
            <param name="input">The input bit for the register.</param>
            <param name="clk">The clock input for the register.</param>
            <param name="enable">The enable input for the register.</param>
        </member>
        <member name="T:DigitalLogic16bitComputer.components.registers.SRLatch">
            <summary>
            SR Latch is a fundamental building block of many sequential logic circuits.
            It is a bistable circuit that has two stable states, and can be used to store a bit of information.
            The circuit has two inputs, S (set) and R (reset), and two outputs, Q and Q' (Q prime).
            When S is true and R is false, the circuit's output will be Q = 1, Q' = 0.
            When S is false and R is true, the circuit's output will be Q = 0, Q' = 1.
            If both S and R are true, the circuit is in an invalid state.
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.registers.SRLatch.InputS">
            <summary>
            The S input
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.registers.SRLatch.InputR">
            <summary>
            The R input
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.registers.SRLatch.OutputQ">
            <summary>
            The Q output
            </summary>
        </member>
        <member name="P:DigitalLogic16bitComputer.components.registers.SRLatch.OutputQPrime">
            <summary>
            The Q' output
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.registers.SRLatch.#ctor(DigitalLogic16bitComputer.components.Bit,DigitalLogic16bitComputer.components.Bit)">
            <summary>
            Initializes a new SR Latch with the provided input S and input R
            </summary>
            <param name="inputS">The S input</param>
            <param name="inputR">The R input</param>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.registers.SRLatch.Update">
            <summary>
            Updates the circuit's output based on the inputs
            </summary>
        </member>
        <member name="M:DigitalLogic16bitComputer.components.registers.SRLatch.Dispose">
            <summary>
            Disposes of the SR Latch
            </summary>
        </member>
    </members>
</doc>
